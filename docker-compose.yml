services:
  # Frontend
  ui:
    build:
      context: ./ui
    ports:
      - "3000:80"
    depends_on:
      - tms-api
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8000
    networks:
      - tms-network

  # TMS API Gateway
  tms-api:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ./server/app/.env
    depends_on:
      - kafka
      - postgres
      - neo4j
      - timescaledb
    networks:
      - tms-network

  # Event Processing Services
  event-producer:
    build:
      context: ./server
      dockerfile: Dockerfile
    depends_on:
      - kafka
    networks:
      - tms-network

  event-consumer:
    build:
      context: ./server
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres
      - neo4j
      - timescaledb
    networks:
      - tms-network

  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - tms-network

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - tms-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - tms-network

  # Flink for Stream Processing
  flink-jobmanager:
    image: flink:1.18.0
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        parallelism.default: 2
    networks:
      - tms-network

  flink-taskmanager:
    image: flink:1.18.0
    depends_on:
      - flink-jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
    networks:
      - tms-network

  # PostgreSQL with CDC (Debezium connector ready)
  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: tms_oltp
      POSTGRES_USER: tms_user
      POSTGRES_PASSWORD: tms_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_replication_slots=4", "-c", "max_wal_senders=4"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tms-network

  # Neo4j for Graph Data (Routes, Networks)
  neo4j:
    image: neo4j:5.15
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/tms_graph_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
    volumes:
      - neo4j_data:/data
      - ./server/database/neo4j/init.cypher:/var/lib/neo4j/import/init.cypher
    networks:
      - tms-network

  # TimescaleDB for Time-Series Data
  timescaledb:
    image: timescale/timescaledb:latest-pg16
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: tms_timeseries
      POSTGRES_USER: timescale_user
      POSTGRES_PASSWORD: timescale_password
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./server/database/timescale/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tms-network

  # Debezium Connect for CDC
  debezium:
    image: debezium/connect:2.4
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - postgres
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_status
    networks:
      - tms-network

volumes:
  postgres_data:
  neo4j_data:
  timescale_data:

networks:
  tms-network:
    driver: bridge
